/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName --no-wandb

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=True, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ELU(alpha=1.0)
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): ELU(alpha=1.0)
    (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): ELU(alpha=1.0)
    (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (7): ELU(alpha=1.0)
  )
  (memory_rnn1): LSTMCell(288, 256)
  (memory_rnn2): LSTMCell(288, 256)
  (actor): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=4, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

using MLP layer as FFN
Optimizer loaded

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName --no-wandb

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=True, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ELU(alpha=1.0)
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): ELU(alpha=1.0)
    (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): ELU(alpha=1.0)
    (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (7): ELU(alpha=1.0)
  )
  (memory_rnn1): LSTMCell(288, 256)
  (memory_rnn2): LSTMCell(288, 256)
  (actor): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=4, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

using MLP layer as FFN
Optimizer loaded

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=False, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ELU(alpha=1.0)
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): ELU(alpha=1.0)
    (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): ELU(alpha=1.0)
    (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (7): ELU(alpha=1.0)
  )
  (memory_rnn1): LSTMCell(288, 256)
  (memory_rnn2): LSTMCell(288, 256)
  (actor): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=4, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

using MLP layer as FFN
Optimizer loaded

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName --no-wandb

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=True, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName --no-wandb

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=True, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ELU(alpha=1.0)
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): ELU(alpha=1.0)
    (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): ELU(alpha=1.0)
    (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (7): ELU(alpha=1.0)
  )
  (memory_rnn1): LSTMCell(288, 256)
  (memory_rnn2): LSTMCell(288, 256)
  (actor): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=4, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

using MLP layer as FFN
Optimizer loaded

/home/stefan/experiments2/rl-cluster-icml/scripts/train.py --algo ppo --model modelName --no-wandb

Namespace(algo='ppo', batch_size=256, clip_eps=0.1, discount=0.99, entropy_coef=0.005, env=None, epochs=4, frames=10000000, frames_per_proc=256, gae_lambda=0.95, log_interval=1, lr=0.0001, max_grad_norm=0.5, mem=True, model='modelName', no_wandb=True, optim_alpha=0.99, optim_eps=1e-08, procs=32, recurrence=64, save_interval=10, seed=1, text=False, value_loss_coef=0.5)

Device: cuda

Environments loaded

Training status loaded

Model loaded

ACModel(
  (image_conv): Sequential(
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (1): ELU(alpha=1.0)
    (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (3): ELU(alpha=1.0)
    (4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (5): ELU(alpha=1.0)
    (6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (7): ELU(alpha=1.0)
  )
  (memory_rnn1): LSTMCell(288, 256)
  (memory_rnn2): LSTMCell(288, 256)
  (actor): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=4, bias=True)
  )
  (critic): Sequential(
    (0): Linear(in_features=256, out_features=64, bias=True)
    (1): Tanh()
    (2): Linear(in_features=64, out_features=1, bias=True)
  )
)

using MLP layer as FFN
Optimizer loaded

